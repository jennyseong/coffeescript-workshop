{
  "_args": [
    [
      {
        "raw": "atom",
        "scope": null,
        "escapedName": "atom",
        "name": "atom",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\natha_000\\Documents\\GitHub\\tic-tac\\tic-tac-toe-master"
    ]
  ],
  "_from": "atom@latest",
  "_id": "atom@1.0.0",
  "_inCache": true,
  "_location": "/atom",
  "_nodeVersion": "4.2.3",
  "_npmUser": {
    "name": "staydecent",
    "email": "npm@staydecent.ca"
  },
  "_npmVersion": "2.14.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "atom",
    "scope": null,
    "escapedName": "atom",
    "name": "atom",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/atom/-/atom-1.0.0.tgz",
  "_shasum": "2d1224d5571e9c36d2b9961f2e0aa2229eef3e60",
  "_shrinkwrap": null,
  "_spec": "atom",
  "_where": "C:\\Users\\natha_000\\Documents\\GitHub\\tic-tac\\tic-tac-toe-master",
  "author": {
    "name": "Adrian Unger"
  },
  "bugs": {
    "url": "https://github.com/staydecent/atom/issues"
  },
  "dependencies": {},
  "description": "shared, synchronous, independent state for javascript apps",
  "devDependencies": {
    "browserify": "^11.0.1",
    "es6-promise": "^3.0.2",
    "faucet": "0.0.1",
    "jshint": "^2.8.0",
    "tape": "^4.0.3"
  },
  "directories": {},
  "dist": {
    "shasum": "2d1224d5571e9c36d2b9961f2e0aa2229eef3e60",
    "tarball": "https://registry.npmjs.org/atom/-/atom-1.0.0.tgz"
  },
  "gitHead": "306b1a5dda78e3536db9de52ea0391499755ace4",
  "homepage": "https://github.com/staydecent/atom#readme",
  "keywords": [
    "shared",
    "synchronous",
    "independent",
    "state"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "staydecent",
      "email": "npm@staydecent.ca"
    }
  ],
  "name": "atom",
  "optionalDependencies": {},
  "readme": "# atom\n\n[![Build Status](https://travis-ci.org/staydecent/atom.svg?branch=master)](https://travis-ci.org/staydecent/atom) [![bitHound Score](https://www.bithound.io/github/staydecent/atom/badges/score.svg)](https://www.bithound.io/github/staydecent/atom)\n\nShared, synchronous, independent state for javascript apps.\n\nBasically re-implemented the [Redux](http://gaearon.github.io/redux/) API\nwithout ES6 syntax and some of the top-level API exports.\n\n## Concepts\n\n1. You're application state is hidden within the `atom` function. It cannot be\n   mutated outside of the atom function.\n2. To affect your state, you need to `trigger` an \"action\".\n3. \"actions\" can be just a string, or an object or any value you want.\n4. You define a single \"reducer\" function that accepts the current state and action and returns a new state.\n5. You can register any # of \"subscribers\" that are called after your reducer returns a new state.\n\n## Example\n\n```javascript\nfunction counter(state, action) {\n  switch (action.type) {\n  case 'INCREMENT':\n    return state + 1;\n  case 'DECREMENT':\n    return state - 1;\n  case 'INCREMENT_ASYNC':\n    return function(dispatch) {\n      setTimeout(function() {\n        dispatch({type: 'INCREMENT'});\n      }, 1000);\n    };\n  default:\n    return state;\n  }\n}\n\nvar store = atom(counter, 0);\n\nstore.subscribe(function() {\n  console.log(store.getState())\n});\n\nstore.dispatch({ type: 'INCREMENT' }); // 1\nstore.dispatch({ type: 'INCREMENT' }); // 2\nstore.dispatch({ type: 'DECREMENT' }); // 1\nstore.dispatch({ type: 'INCREMENT_ASYNC' }); // 2\n```\n\nSee also: [Simple Routing\nExample](https://github.com/staydecent/atom-routing-example)\n\n## API\n\n### atom(reducer[, initialState])\n\nCreates your atom `store` that contains your application state. Returns an Object with methods for interacting with your state.\n\n#### reducer(state, action)\n\nA function that accepts `function(state, action)` and returns the potentially modified `state`. You can also return a function with the signature `function(dispatch)` for performing asynchronous tasks before modifying the state. When your async task completes, the passed in `dispatch` function can be called with an \"action\" that results your reducer returning a new state.\n\n### Store API\n\n#### dispatch(action)\n\nThis calls your \"reducer\" with the current state and the given \"action\".\n\n#### subscribe(listener)\n\nAdd a function to be called anytime after your \"reducer\" has returned a new state. This is useful for logging changes or syncing to your storage or database.\n\nYou can add as many listeners as you would like.\n\n#### getState()\n\nReturns the current state. Useful for calling within a `subscribe`d listener.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/staydecent/atom.git"
  },
  "scripts": {
    "pretest": "jshint index.js",
    "test": "tape test/*.js | faucet"
  },
  "version": "1.0.0"
}
